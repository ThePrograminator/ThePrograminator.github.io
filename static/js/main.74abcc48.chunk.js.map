{"version":3,"sources":["components/AttributeCard.js","containers/AttributeCardList.js","components/RandomizerForm.js","components/Header.js","components/GlobalStyles.js","components/Themes.js","App.js","serviceWorker.js","index.js"],"names":["OpacityAnimation","posed","div","hidden","opacity","visible","transition","duration","HoverText","hoverable","pressable","init","scale","hover","press","AttributeCard","props","useState","isVisible","setVisble","themeContext","useContext","ThemeContext","useEffect","pose","Card","bg","theme","style","width","className","onClick","window","open","randomElement","Body","Title","textAlign","AttributeCardList","randomizedLists","map","randomList","listIndex","key","Row","lg","Col","margin","randomizedListsForms","title","CardColumns","index","RandomizerForm","possibleValuesObject","Forms","forEach","form","hasOwnProperty","element","console","log","PossibleValuesObject","possibleValues","initialValues","onSubmit","values","handleSubmit","handleChange","errors","touched","handleBlur","isSubmitting","Form","Group","controlId","id","Label","label","Control","name","type","placeholder","onChange","onBlur","min","max","data","length","value","size","Text","muted","helpText","Button","variant","Header","Container","fluid","sm","verticalAlign","padding","maxWidth","class","themeToggler","GlobalStyles","createGlobalStyle","body","text","lightTheme","toggleBorder","background","darkTheme","App","state","localStorage","setItem","setState","setThemeToggler","currentRandomizedLists","currentRandomizedListsForms","amount","push","generateRandomizeList","arry","dataLeft","i","rand","Math","floor","random","splice","localTheme","getItem","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.74abcc48.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport posed from \"react-pose\";\r\nimport { ThemeContext } from \"styled-components\";\r\n\r\nconst OpacityAnimation = posed.div({\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1, transition: { duration: 1000 } },\r\n});\r\n\r\nconst HoverText = posed.div({\r\n  hoverable: true,\r\n  pressable: true,\r\n  init: { scale: 1 },\r\n  hover: { scale: 1.25 },\r\n  press: {\r\n    scale: 1.1,\r\n  },\r\n});\r\n\r\nconst AttributeCard = (props) => {\r\n  const [isVisible, setVisble] = useState(false);\r\n  const themeContext = useContext(ThemeContext);\r\n\r\n  useEffect(() => {\r\n    setVisble(true);\r\n  }, []);\r\n\r\n  return (\r\n    <OpacityAnimation pose={isVisible ? \"visible\" : \"hidden\"}>\r\n      <Card\r\n        bg={themeContext.theme}\r\n        style={{ width: \"18rem\" }}\r\n        className=\"justify-content-md-center\"\r\n        onClick={() =>\r\n          window.open(\r\n            \"https://en.wikipedia.org/wiki/\" + props.randomElement,\r\n            \"_blank\"\r\n          )\r\n        }\r\n      >\r\n        <HoverText>\r\n          <Card.Body>\r\n            <Card.Title style={{ textAlign: \"center\" }}>\r\n              {props.randomElement}\r\n            </Card.Title>\r\n          </Card.Body>\r\n        </HoverText>\r\n      </Card>\r\n    </OpacityAnimation>\r\n  );\r\n};\r\n\r\nexport default AttributeCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport AttributeCard from \"../components/AttributeCard.js\";\r\nimport { CardColumns, Col, Row } from \"react-bootstrap\";\r\nimport posed from \"react-pose\";\r\n\r\nconst OpacityAnimation = posed.div({\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1, transition: { duration: 1000 } },\r\n});\r\n\r\nconst AttributeCardList = (props) => {\r\n  const [isVisible, setVisble] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setVisble(true);\r\n  }, []);\r\n\r\n  return (\r\n    <OpacityAnimation pose={isVisible ? \"visible\" : \"hidden\"}>\r\n      {props.randomizedLists.map((randomList, listIndex) => (\r\n        <div key={listIndex}>\r\n          <Row lg={true}>\r\n            <Col lg={true}>\r\n              <h2\r\n                style={{ margin: \"auto\", textAlign: \"center\", width: \"200px\" }}\r\n              >\r\n                {props.randomizedListsForms[listIndex].title}\r\n              </h2>\r\n            </Col>\r\n            <Col lg={true}>\r\n              <CardColumns>\r\n                {randomList.map((randomElement, index) => (\r\n                  <Col key={index} lg={true}>\r\n                    <AttributeCard randomElement={randomElement} />\r\n                  </Col>\r\n                ))}\r\n              </CardColumns>\r\n            </Col>\r\n          </Row>\r\n          <hr />\r\n        </div>\r\n      ))}\r\n    </OpacityAnimation>\r\n  );\r\n};\r\n\r\nexport default AttributeCardList;\r\n","import React, { useState } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\nimport Forms from \"../data/Forms.json\";\r\n\r\nfunction PossibleValuesObject() {\r\n  let possibleValuesObject = {};\r\n  Forms.forEach((form) => {\r\n    for (const key in form) {\r\n      if (form.hasOwnProperty(key) && key === \"id\") {\r\n        const element = form[key];\r\n        possibleValuesObject[element] = 0;\r\n      }\r\n    }\r\n  });\r\n  console.log(\"possibleValues\", possibleValuesObject);\r\n  return possibleValuesObject;\r\n}\r\n\r\nconst RandomizerForm = (props) => {\r\n  const [possibleValues, setPossibleValues] = useState(PossibleValuesObject());\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={possibleValues}\r\n      onSubmit={(values) => {\r\n        props.handleSubmit(values);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          {Forms.map((form, index) => (\r\n            <Form.Row style={{ margin: \"auto\" }} key={index}>\r\n              <Form.Group\r\n                controlId={form.id}\r\n                style={{ margin: \"auto\", width: \"50%\" }}\r\n              >\r\n                <Col lg={true}>\r\n                  <Form.Label className=\"text-center\">{form.label}</Form.Label>\r\n                </Col>\r\n                <Col lg={true}>\r\n                  <Form.Control\r\n                    name={form.name}\r\n                    type=\"Number\"\r\n                    placeholder={form.placeholder}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    min={0}\r\n                    max={form.data.length}\r\n                    value={values[form.id]}\r\n                    size=\"lg\"\r\n                  />\r\n                  <Form.Text muted>{form.helpText}</Form.Text>\r\n                </Col>\r\n              </Form.Group>\r\n            </Form.Row>\r\n          ))}\r\n          <Form.Row style={{ margin: \"auto\" }}>\r\n            <Button variant=\"primary\" type=\"submit\" style={{ margin: \"auto\" }}>\r\n              Submit\r\n            </Button>\r\n          </Form.Row>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default RandomizerForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Container, Form } from \"react-bootstrap\";\r\nimport posed from \"react-pose\";\r\nimport { BsMoon, BsSun } from \"react-icons/bs\";\r\n\r\nconst OpacityAnimation = posed.div({\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1, transition: { duration: 1000 } },\r\n});\r\n\r\nconst Header = (props) => {\r\n  const [isVisible, setVisble] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setVisble(true);\r\n  }, [isVisible]);\r\n\r\n  return (\r\n    <OpacityAnimation pose={isVisible ? \"visible\" : \"hidden\"}>\r\n      <Container fluid={true}>\r\n        <Row lg={true}>\r\n          <Col lg={true}>\r\n            <h1 style={{ margin: \"auto\", textAlign: \"center\" }}>\r\n              Game Jam Randomizer\r\n            </h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={2} style={{ verticalAlign: \"middle\", padding: \"5px\", maxWidth: \"fit-content\" }}>\r\n            <BsMoon />\r\n          </Col>\r\n          <Col sm={2} style={{ verticalAlign: \"middle\", padding: \"5px\", maxWidth: \"fit-content\"  }}>\r\n            <label class=\"switch\">\r\n              <input type=\"checkbox\" onClick={() => props.themeToggler()} />\r\n              <span class=\"slider round\"></span>\r\n            </label>\r\n          </Col>\r\n          <Col sm={2} style={{ verticalAlign: \"middle\", padding: \"5px\", maxWidth: \"fit-content\"  }}>\r\n            <BsSun />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </OpacityAnimation>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\n/*\r\n<Form.Check\r\n              type=\"switch\"\r\n              id=\"custom-switch\"\r\n              onClick={() => props.themeToggler()}\r\n            />\r\n\r\n*/\r\n","import { createGlobalStyle } from \"styled-components\";\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\r\n    transition: all 0.50s linear;\r\n  }\r\n  `;\r\n","export const lightTheme = {\r\n  body: \"#FFF\",\r\n  text: \"#363537\",\r\n  toggleBorder: \"#FFF\",\r\n  background: \"#363537\",\r\n  theme: \"light\"\r\n};\r\nexport const darkTheme = {\r\n  body: \"#363537\",\r\n  text: \"#FAFAFA\",\r\n  toggleBorder: \"#6B8096\",\r\n  background: \"#999\",\r\n  theme: \"dark\"\r\n};\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport AttributeCardList from \"./containers/AttributeCardList.js\";\r\nimport RandomizerForm from \"./components/RandomizerForm.js\";\r\nimport Header from \"./components/Header.js\";\r\nimport Forms from \"./data/Forms.json\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyles } from \"./components/GlobalStyles\";\r\nimport { lightTheme, darkTheme } from \"./components/Themes\";\r\n\r\nconst ConsoleLog = (props) => {\r\n  console.log(\"ConsoleLog\", props.elements);\r\n  return false;\r\n};\r\n///\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    randomizedLists: [],\r\n    randomizedListsForms: [],\r\n    theme: \"light\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const localTheme = window.localStorage.getItem(\"theme\");\r\n    this.setThemeToggler(localTheme);\r\n  }\r\n\r\n  themeToggler = () => {\r\n    window.localStorage.setItem(\r\n      \"theme\",\r\n      this.state.theme === \"light\" ? \"dark\" : \"light\"\r\n    );\r\n    this.state.theme === \"light\"\r\n      ? this.setState({ theme: \"dark\" })\r\n      : this.setState({ theme: \"light\" });\r\n  };\r\n\r\n  setThemeToggler = (theme) => {\r\n    this.setState({ theme: theme });\r\n  };\r\n\r\n  handleSubmit = (values) => {\r\n    //alert(JSON.stringify(values, null, 2));\r\n\r\n    let currentRandomizedLists = [];\r\n    let currentRandomizedListsForms = [];\r\n    Forms.forEach((form) => {\r\n      for (const key in form) {\r\n        if (form.hasOwnProperty(key) && key === \"id\") {\r\n          const element = form[key];\r\n          const amount = values[element];\r\n          if (amount > 0) {\r\n            console.log(\"key\", element);\r\n            console.log(\"amount\", amount);\r\n            currentRandomizedLists.push(\r\n              this.generateRandomizeList(form, amount)\r\n            );\r\n            currentRandomizedListsForms.push(form);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    this.setState(\r\n      {\r\n        randomizedLists: currentRandomizedLists,\r\n        randomizedListsForms: currentRandomizedListsForms,\r\n      },\r\n      () => console.log(\"addToRandomizedList\", this.state)\r\n    );\r\n  };\r\n\r\n  generateRandomizeList = (form, amount) => {\r\n    let arry = [];\r\n    let dataLeft = [...form.data];\r\n    if (amount > dataLeft.length) amount = dataLeft.length;\r\n    for (let i = 0; i < amount; i++) {\r\n      const rand = Math.floor(Math.random() * dataLeft.length);\r\n      console.log(rand);\r\n      arry.push(dataLeft[rand]);\r\n      console.log(dataLeft[rand]);\r\n\r\n      dataLeft.splice(rand, 1);\r\n    }\r\n    return arry;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ThemeProvider\r\n        theme={this.state.theme === \"light\" ? lightTheme : darkTheme}\r\n      >\r\n        <GlobalStyles />\r\n        <Container fluid={true}>\r\n          <Row lg={true}>\r\n            <Col>\r\n              <Header themeToggler={this.themeToggler} />\r\n            </Col>\r\n          </Row>\r\n          <Row lg={true}>\r\n            <Container fluid={true}>\r\n              <RandomizerForm handleSubmit={this.handleSubmit} />\r\n            </Container>\r\n          </Row>\r\n          <hr />\r\n\r\n          {this.state.randomizedLists.length > 0 ? (\r\n            <Container fluid>\r\n              <p style={{ textAlign: \"center\" }}>\r\n                Click on a box to goto wikipedia page\r\n              </p>\r\n              <AttributeCardList\r\n                randomizedLists={this.state.randomizedLists}\r\n                randomizedListsForms={this.state.randomizedListsForms}\r\n              />\r\n            </Container>\r\n          ) : null}\r\n        </Container>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}