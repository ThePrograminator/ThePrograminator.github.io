{"version":3,"sources":["components/AttributeCard.js","containers/AttributeCardList.js","components/RandomizerForm.js","components/Header.js","components/GlobalStyles.js","components/Themes.js","App.js","serviceWorker.js","index.js"],"names":["OpacityAnimation","posed","div","hidden","opacity","visible","transition","duration","HoverText","hoverable","pressable","init","scale","hover","press","AttributeCard","props","useState","isVisible","setVisble","themeContext","useContext","ThemeContext","useEffect","pose","Card","bg","theme","style","width","className","onClick","window","open","randomElement","Body","Title","textAlign","AttributeCardList","randomizedLists","map","randomList","listIndex","key","Row","lg","Col","sm","margin","maxWidth","randomizedListsForms","title","CardColumns","index","RandomizerForm","possibleValuesObject","Forms","forEach","form","hasOwnProperty","element","console","log","PossibleValuesObject","possibleValues","initialValues","onSubmit","values","handleSubmit","handleChange","errors","touched","handleBlur","isSubmitting","Form","Group","controlId","id","Label","label","md","Control","name","type","placeholder","onChange","onBlur","min","max","data","length","value","size","Text","muted","helpText","Button","variant","Header","Container","fluid","verticalAlign","padding","class","themeToggler","GlobalStyles","createGlobalStyle","body","text","lightTheme","toggleBorder","background","darkTheme","App","state","localStorage","setItem","setState","setThemeToggler","currentRandomizedLists","currentRandomizedListsForms","amount","push","generateRandomizeList","arry","dataLeft","i","rand","Math","floor","random","splice","localTheme","getItem","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.851a5fd9.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport posed from \"react-pose\";\r\nimport { ThemeContext } from \"styled-components\";\r\n\r\nconst OpacityAnimation = posed.div({\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1, transition: { duration: 1000 } },\r\n});\r\n\r\nconst HoverText = posed.div({\r\n  hoverable: true,\r\n  pressable: true,\r\n  init: { scale: 1 },\r\n  hover: { scale: 1.25 },\r\n  press: {\r\n    scale: 1.1,\r\n  },\r\n});\r\n\r\nconst AttributeCard = (props) => {\r\n  const [isVisible, setVisble] = useState(false);\r\n  const themeContext = useContext(ThemeContext);\r\n\r\n  useEffect(() => {\r\n    setVisble(true);\r\n  }, []);\r\n\r\n  return (\r\n    <OpacityAnimation pose={isVisible ? \"visible\" : \"hidden\"}>\r\n      <Card\r\n        bg={themeContext.theme}\r\n        style={{ width: \"18rem\" }}\r\n        className=\"justify-content-md-center\"\r\n        onClick={() =>\r\n          window.open(\r\n            \"https://en.wikipedia.org/wiki/\" + props.randomElement,\r\n            \"_blank\"\r\n          )\r\n        }\r\n      >\r\n        <HoverText>\r\n          <Card.Body>\r\n            <Card.Title style={{ textAlign: \"center\" }}>\r\n              {props.randomElement}\r\n            </Card.Title>\r\n          </Card.Body>\r\n        </HoverText>\r\n      </Card>\r\n    </OpacityAnimation>\r\n  );\r\n};\r\n\r\nexport default AttributeCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport AttributeCard from \"../components/AttributeCard.js\";\r\nimport { CardColumns, Col, Row } from \"react-bootstrap\";\r\nimport posed from \"react-pose\";\r\n\r\nconst OpacityAnimation = posed.div({\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1, transition: { duration: 1000 } },\r\n});\r\n\r\nconst AttributeCardList = (props) => {\r\n  const [isVisible, setVisble] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setVisble(true);\r\n  }, []);\r\n\r\n  return (\r\n    <OpacityAnimation pose={isVisible ? \"visible\" : \"hidden\"}>\r\n      {props.randomizedLists.map((randomList, listIndex) => (\r\n        <div key={listIndex}>\r\n          <Row lg={true}>\r\n            <Col sm={true}>\r\n              <h2\r\n                style={{\r\n                  margin: \"auto\",\r\n                  textAlign: \"center\",\r\n                  width: \"200px\",\r\n                  maxWidth: \"200px\",\r\n                }}\r\n              >\r\n                {props.randomizedListsForms[listIndex].title}\r\n              </h2>\r\n            </Col>\r\n            <Col lg={true}>\r\n              <CardColumns>\r\n                {randomList.map((randomElement, index) => (\r\n                  <Col key={index} lg={true}>\r\n                    <AttributeCard randomElement={randomElement} />\r\n                  </Col>\r\n                ))}\r\n              </CardColumns>\r\n            </Col>\r\n          </Row>\r\n          <hr />\r\n        </div>\r\n      ))}\r\n    </OpacityAnimation>\r\n  );\r\n};\r\n\r\nexport default AttributeCardList;\r\n","import React, { useState } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\nimport Forms from \"../data/Forms.json\";\r\n\r\nfunction PossibleValuesObject() {\r\n  let possibleValuesObject = {};\r\n  Forms.forEach((form) => {\r\n    for (const key in form) {\r\n      if (form.hasOwnProperty(key) && key === \"id\") {\r\n        const element = form[key];\r\n        possibleValuesObject[element] = 0;\r\n      }\r\n    }\r\n  });\r\n  console.log(\"possibleValues\", possibleValuesObject);\r\n  return possibleValuesObject;\r\n}\r\n\r\nconst RandomizerForm = (props) => {\r\n  const [possibleValues, setPossibleValues] = useState(PossibleValuesObject());\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={possibleValues}\r\n      onSubmit={(values) => {\r\n        props.handleSubmit(values);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit}>\r\n          {Forms.map((form, index) => (\r\n            <Form.Row style={{ margin: \"auto\", maxWidth: \"1000px\" }} key={index}>\r\n              <Form.Group\r\n                controlId={form.id}\r\n                style={{ margin: \"auto\", width: \"100%\", maxWidth: \"600px\" }}\r\n              >\r\n                <Col sm={true}>\r\n                  <Form.Label className=\"text-center\">{form.label}</Form.Label>\r\n                </Col>\r\n                <Col md={true}>\r\n                  <Form.Control\r\n                    name={form.name}\r\n                    type=\"Number\"\r\n                    placeholder={form.placeholder}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    min={0}\r\n                    max={form.data.length}\r\n                    value={values[form.id]}\r\n                    size=\"lg\"\r\n                  />\r\n                  <Form.Text muted>{form.helpText}</Form.Text>\r\n                </Col>\r\n              </Form.Group>\r\n            </Form.Row>\r\n          ))}\r\n          <Form.Row style={{ margin: \"auto\" }}>\r\n            <Button variant=\"primary\" type=\"submit\" style={{ margin: \"auto\" }}>\r\n              Submit\r\n            </Button>\r\n          </Form.Row>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default RandomizerForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Container, Form } from \"react-bootstrap\";\r\nimport posed from \"react-pose\";\r\nimport { BsMoon, BsSun } from \"react-icons/bs\";\r\n\r\nconst OpacityAnimation = posed.div({\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1, transition: { duration: 1000 } },\r\n});\r\n\r\nconst Header = (props) => {\r\n  const [isVisible, setVisble] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setVisble(true);\r\n  }, [isVisible]);\r\n\r\n  return (\r\n    <OpacityAnimation pose={isVisible ? \"visible\" : \"hidden\"}>\r\n      <Container fluid={true}>\r\n        <Row lg={true}>\r\n          <Col lg={true}>\r\n            <h1\r\n              style={{\r\n                margin: \"auto\",\r\n                textAlign: \"center\",\r\n                maxWidth: \"1000px\",\r\n              }}\r\n            >\r\n              Game Jam Randomizer\r\n            </h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col\r\n            sm={2}\r\n            style={{\r\n              verticalAlign: \"middle\",\r\n              padding: \"5px\",\r\n              maxWidth: \"fit-content\",\r\n            }}\r\n          >\r\n            <BsMoon />\r\n          </Col>\r\n          <Col\r\n            sm={2}\r\n            style={{\r\n              verticalAlign: \"middle\",\r\n              padding: \"5px\",\r\n              maxWidth: \"fit-content\",\r\n            }}\r\n          >\r\n            <label class=\"switch\">\r\n              <input type=\"checkbox\" onClick={() => props.themeToggler()} />\r\n              <span class=\"slider round\"></span>\r\n            </label>\r\n          </Col>\r\n          <Col\r\n            sm={2}\r\n            style={{\r\n              verticalAlign: \"middle\",\r\n              padding: \"5px\",\r\n              maxWidth: \"fit-content\",\r\n            }}\r\n          >\r\n            <BsSun />\r\n          </Col>\r\n        </Row>\r\n        <Row\r\n          lg={true}\r\n          style={{ margin: \"auto\", textAlign: \"center\", maxWidth: \"1000px\" }}\r\n        >\r\n          <Col lg={true}>\r\n            <p style={{ margin: \"auto\", textAlign: \"center\" }}>\r\n              Ever been stuck trying to come up with a game? This site is here\r\n              to help you!\r\n            </p>\r\n            <br />\r\n            <p style={{ margin: \"auto\", textAlign: \"center\" }}>\r\n              All you have to do is fill in the form below with the different\r\n              criteria you have for your game/game jam. You decide, how many\r\n              unique objects to include, what themes and genres to include etc.\r\n              All the different criteria below are optional and you don't need\r\n              to include them all. To not include a criteria make sure the value\r\n              is zero.\r\n            </p>\r\n            <br />\r\n            <p style={{ margin: \"auto\", textAlign: \"center\" }}>\r\n              Game Tags, Sub Genres, and Genres may overlap, consider not using all three criteria at once.\r\n            </p>\r\n            <br />\r\n            <p style={{ margin: \"auto\", textAlign: \"center\" }}>\r\n              Disclaimer: I have not read or edited all the possible values, and\r\n              therefore sorry if there is any thing offensive.\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </OpacityAnimation>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\r\n    transition: all 0.50s linear;\r\n  }\r\n  `;\r\n","export const lightTheme = {\r\n  body: \"#FFF\",\r\n  text: \"#363537\",\r\n  toggleBorder: \"#FFF\",\r\n  background: \"#363537\",\r\n  theme: \"light\"\r\n};\r\nexport const darkTheme = {\r\n  body: \"#363537\",\r\n  text: \"#FAFAFA\",\r\n  toggleBorder: \"#6B8096\",\r\n  background: \"#999\",\r\n  theme: \"dark\"\r\n};\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport AttributeCardList from \"./containers/AttributeCardList.js\";\r\nimport RandomizerForm from \"./components/RandomizerForm.js\";\r\nimport Header from \"./components/Header.js\";\r\nimport Forms from \"./data/Forms.json\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyles } from \"./components/GlobalStyles\";\r\nimport { lightTheme, darkTheme } from \"./components/Themes\";\r\n\r\nconst ConsoleLog = (props) => {\r\n  console.log(\"ConsoleLog\", props.elements);\r\n  return false;\r\n};\r\n///\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    randomizedLists: [],\r\n    randomizedListsForms: [],\r\n    theme: \"light\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    const localTheme = window.localStorage.getItem(\"theme\");\r\n    this.setThemeToggler(localTheme);\r\n  }\r\n\r\n  themeToggler = () => {\r\n    window.localStorage.setItem(\r\n      \"theme\",\r\n      this.state.theme === \"light\" ? \"dark\" : \"light\"\r\n    );\r\n    this.state.theme === \"light\"\r\n      ? this.setState({ theme: \"dark\" })\r\n      : this.setState({ theme: \"light\" });\r\n  };\r\n\r\n  setThemeToggler = (theme) => {\r\n    this.setState({ theme: theme });\r\n  };\r\n\r\n  handleSubmit = (values) => {\r\n    //alert(JSON.stringify(values, null, 2));\r\n\r\n    let currentRandomizedLists = [];\r\n    let currentRandomizedListsForms = [];\r\n    Forms.forEach((form) => {\r\n      for (const key in form) {\r\n        if (form.hasOwnProperty(key) && key === \"id\") {\r\n          const element = form[key];\r\n          const amount = values[element];\r\n          if (amount > 0) {\r\n            console.log(\"key\", element);\r\n            console.log(\"amount\", amount);\r\n            currentRandomizedLists.push(\r\n              this.generateRandomizeList(form, amount)\r\n            );\r\n            currentRandomizedListsForms.push(form);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    this.setState(\r\n      {\r\n        randomizedLists: currentRandomizedLists,\r\n        randomizedListsForms: currentRandomizedListsForms,\r\n      },\r\n      () => console.log(\"addToRandomizedList\", this.state)\r\n    );\r\n  };\r\n\r\n  generateRandomizeList = (form, amount) => {\r\n    let arry = [];\r\n    let dataLeft = [...form.data];\r\n    if (amount > dataLeft.length) amount = dataLeft.length;\r\n    for (let i = 0; i < amount; i++) {\r\n      const rand = Math.floor(Math.random() * dataLeft.length);\r\n      console.log(rand);\r\n      arry.push(dataLeft[rand]);\r\n      console.log(dataLeft[rand]);\r\n\r\n      dataLeft.splice(rand, 1);\r\n    }\r\n    return arry;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ThemeProvider\r\n        theme={this.state.theme === \"light\" ? lightTheme : darkTheme}\r\n      >\r\n        <GlobalStyles />\r\n        <Container fluid={true}>\r\n          <Row lg={true}>\r\n            <Col>\r\n              <Header themeToggler={this.themeToggler} />\r\n            </Col>\r\n          </Row>\r\n          <Row lg={true} style={{margin: \"20px\"}}>\r\n            <Container fluid={true}>\r\n                <RandomizerForm handleSubmit={this.handleSubmit} />\r\n            </Container>\r\n          </Row>\r\n          <hr />\r\n\r\n          {this.state.randomizedLists.length > 0 ? (\r\n            <Container fluid>\r\n              <p style={{ textAlign: \"center\" }}>\r\n                Click on a box to goto wikipedia page\r\n              </p>\r\n              <AttributeCardList\r\n                randomizedLists={this.state.randomizedLists}\r\n                randomizedListsForms={this.state.randomizedListsForms}\r\n              />\r\n            </Container>\r\n          ) : null}\r\n        </Container>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}